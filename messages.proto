syntax = "proto3";

/* Represents the events pushed by the server during a game
    - type: type of the event
    - players: player list, used on STATE_UPDATE
    - ping_update: updated player's ping, used on PING_UPDATE
    - projectiles: projectile list, used on STATE_UPDATE
    - player_joined_id: ID of the player that joined the game
 */
message GameEvent {
    GameEventType type = 1;
    repeated Player players = 2;
    uint64 latency = 3;
    repeated Projectile projectiles = 4;
    uint64 player_joined_id = 5;
    Player winner_player = 6;
    uint64 current_round = 7;
    int64 timestamp = 8;
    map<uint64, string> selected_characters = 9;
}

/* Type of game events
    - STATE_UPDATE: The game's state has been updated
    - PING_UPDATE: The player's current ping updated
    - PLAYER_JOINED: A player has joined the game
    - INITIAL_POSITIONS: The initial positions of each player
 */
enum GameEventType {
    STATE_UPDATE = 0;
    PING_UPDATE = 1;
    PLAYER_JOINED = 2;
    NEXT_ROUND = 3;
    LAST_ROUND = 4;
    GAME_FINISHED = 5;
    INITIAL_POSITIONS = 6;
    SELECTED_CHARACTER_UPDATE = 7;
    FINISH_CHARACTER_SELECTION = 8;
}

message PlayerCharacter{
    uint64 player_id = 1;
    string character_name = 2;
}

/* Information about a player
    - id: ID of the player, this ID is the identifier in the game session, the game object tied to it
    - health: Current health of the player
    - position: Position of the player in the server game grid (see Position for more info)
    - power: [Amin 2023-05-05:  not sure what this is, was copied from struct like this]
    - action: [Manu 2023-05-12: accion to renderize on client side]
    - last_melee_attack: Time of the last melee attack done by the player in
      seconds since unix epoch.
    - status: currently if alive or dead
    - aoe_position: Position of the aoe attack, only used when action == ATTACKING_AOE
    - {basic, first, second, third, fourth}_cooldown_left: Time remaining in seconds until the cooldown is over.
    - character_name: Name of the player's character
 */
message Player {
    uint64 id = 1;
    sint64 health = 2;
    Position position = 3;
    // uint32 power = 4;
    uint64 last_melee_attack  = 4;
    Status status = 5;
    PlayerAction action = 6;
    Position aoe_position = 7;
    uint64 kill_count = 8;
    uint64 death_count = 9;
    Position teleport_position = 10;
    uint64 basic_skill_cooldown_left = 11;
    uint64 first_skill_cooldown_left = 12;
    uint64 second_skill_cooldown_left = 13;
    uint64 third_skill_cooldown_left = 14;
    uint64 fourth_skill_cooldown_left = 15;
    string character_name = 16;
}

/*
Status of a player
*/

enum Status {
    ALIVE = 0;
    DEAD = 1;
}

/* A position in the server game grid, the grid is a NxN square with (0,0) in the top left corner
    - x: X coordinate in the grid
    - y: Y coordinate in the grid
 */
message Position {
    uint64 x = 1;
    uint64 y = 2;
}

/* A relative positioncorner
    - x: X coordinate
    - y: Y coordinate
 */
message RelativePosition {
    int64 x = 1;
    int64 y = 2;
}

/* Represents any action that a client/player can make
    - action: the action taken by the player
    - direction: direction of the action (see Direction), used on actions MOVE, ATTACK
    - position: to decide aoe attack center
    - move_delta: movement direction
    - target: player id to autoattack
 */
message ClientAction {
    Action action = 1;
    Direction direction = 2;
    RelativePosition position = 3;
    JoystickValues move_delta = 4;
    sint64 target = 5;
    PlayerCharacter player_character = 6;
}

/* Actions a client/player performs
    - MOVE: the player moves
    - ATTACK: player attacks
    - TELEPORT: the player instantly moves to a non-contiguous position 
    - ATTACK_AOE:
    - MOVE_WITH_JOYSTICK:
    - ADD_BOT: Ask the server to add a bot player to the game
    - AUTO_ATTACK: Player attacks nearest oponent, if in range.
    - BASIC_ATTACK, SKILL_{1, 2, 3, 4}: Player skills.
 */
enum Action {
    ACTION_UNSPECIFIED = 0;
    MOVE = 1;
    ATTACK = 2;
    TELEPORT = 4;
    ATTACK_AOE = 5;
    MOVE_WITH_JOYSTICK = 6;
    ADD_BOT = 7;
    AUTO_ATTACK = 8;
    BASIC_ATTACK = 9;
    SKILL_1 = 10;
    SKILL_2 = 11;
    SKILL_3 = 12;
    SKILL_4 = 13;
    SELECT_CHARACTER = 14;
}

/* Directions an action can happen in
 */
enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    UP = 1;
    DOWN = 2;
    LEFT = 3;
    RIGHT = 4;
}

message JoystickValues {
    float x = 1;
    float y = 2;
}

/* Actions a player performs
    - NOTHING: nothing
    - ATTACKING: player is attacking
 */
enum PlayerAction {
    NOTHING = 0;
    ATTACKING = 1;
    ATTACKING_AOE = 2;
    EXECUTING_SKILL_1 = 3;
    TELEPORTING = 4;
    EXECUTING_SKILL_2 = 5;
    EXECUTING_SKILL_3 = 6;
    EXECUTING_SKILL_4 = 7;
}

/* Represents the events happening in the matchmaking lobby, either from client or server
    - type: type of the event
    - lobby_id: ID of the matchmaking lobby, used on CONNECTED
    - player_id: ID assigned to the player (client) in the matchmaking lobby, used on CONNECTED
    - added_player_id: ID of any new player joining the lobby, used on PLAYER_ADDED
    - game_id: ID of the game session to join, used on GAME_STARTED
    - [DEPRECATED] player_count: Number of players in the matchmaking lobby, used on PLAYER_COUNT
    - players: List of players, used on PLAYER_ADDED
    - removed_player_id: ID of any player leaving the lobby, used on PLAYER_REMOVED
 */
message LobbyEvent {
    LobbyEventType type = 1;
    string lobby_id = 2;
    uint64 player_id = 3;
    uint64 added_player_id = 4;
    string game_id = 5;
    uint64 player_count = 6;
    repeated uint64 players = 7;
    uint64 removed_player_id = 8;
    ServerGameSettings game_config = 9;
}

message RunnerConfig {
    string Name = 1;
    uint64 board_width = 2;
    uint64 board_height = 3;
    uint64 server_tickrate_ms = 4;
    uint64 game_timeout_ms = 5;
}

message GameConfig {
    BoardSize board_size = 1;
    uint64 server_tickrate_ms = 2;
    uint64 game_timeout_ms = 3;
}

message BoardSize {
    uint64 width = 1;
    uint64 height = 2;
}

message CharacterConfigItem {
    string Name = 1;
    string Id = 2;
    string Active = 3;
    string Class = 4;
    string Faction = 5;
    string BaseSpeed = 6;
    string SkillBasic = 7;
    string SkillActive1 = 8;
    string SkillActive2 = 9;
    string SkillDash = 10;
    string SkillUltimate = 11;
}

message CharacterConfig {
    repeated CharacterConfigItem Items = 1;
}

message ServerGameSettings {
    RunnerConfig runner_config = 1;
    CharacterConfig character_config = 2;
}
    

/* Type of lobby events
    - CONNECTED: Websocket connection is established
    - PLAYER_ADDED: A player has joined the matchmaking lobby
    - GAME_STARTED: A game session has started from this lobby
    - PLAYER_COUNT: Current player count in the lobby
    - PLAYER_REMOVED: A player has left the matchmaking lobby
 */
enum LobbyEventType {
    TYPE_UNSPECIFIED = 0;
    CONNECTED = 1;
    PLAYER_ADDED = 2;
    GAME_STARTED = 3;
    PLAYER_COUNT = 4;
    START_GAME = 5;
    PLAYER_REMOVED = 6;
}


/* Type of projectiles
    - BULLET: Single little bullet
 */
enum ProjectileType {
    BULLET = 0;
    DISARMING_BULLET = 1;
}

/* Status of projectiles
    - ACTIVE: Active projectile
    - EXPLODED: Exploded projectile
 */
enum ProjectileStatus {
    ACTIVE = 0;
    EXPLODED = 1;
}

/*
    - position: Current projectile prosition
    - direction: Projectile direction
    - speed: Projectile speed
    - range: Attack range, with center in position
    - player_id: Player id who attacked
    - damage: Damage dealt on opponents when hit
    - remaining_ticks: Projectile remaining lifetime
    - type: Projectile type depending on the attack
 */
message Projectile {
    uint64 id = 1;
    Position position = 2;
    JoystickValues direction = 3;
    uint32 speed = 4;
    uint32 range = 5;
    uint64 player_id = 6;
    uint32 damage = 7;
    sint64 remaining_ticks = 8;
    ProjectileType projectile_type = 9;
    ProjectileStatus status = 10;
    uint64 last_attacked_player_id = 11;
    bool pierce = 12;
}
