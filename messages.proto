syntax = "proto3";

/* Represents the events pushed by the server during a game
    - type: type of the event
    - players: player list, used on STATE_UPDATE
    - ping_update: updated player's ping, used on PING_UPDATE
 */
message GameEvent {
    GameEventType type = 1;
    repeated Player players = 2;
    uint64 latency = 3;
}

/* Type of game events
    - STATE_UPDATE: The game's state has been updated
    - PING_UPDATE: The player's current ping updated
 */
enum GameEventType {
    STATE_UPDATE = 0;
    PING_UPDATE = 1;
}

/* Information about a player
    - id: ID of the player, this ID is the identifier in the game session, the game object tied to it
    - health: Current health of the player
    - position: Position of the player in the server game grid (see Position for more info)
    - power: [Amin 2023-05-05:  not sure what this is, was copied from struct like this]
    - action: [Manu 2023-05-12: accion to renderize on client side]
    - last_melee_attack: Time of the last melee attack done by the player in
      seconds since unix epoch.
    - status: currently if alive or dead
    - aoe_position: Position of the aoe attack, only used when action == ATTACKING_AOE
 */
message Player {
    uint64 id = 1;
    sint64 health = 2;
    Position position = 3;
    // uint32 power = 4;
    uint64 last_melee_attack  = 4;
    Status status = 5;
    PlayerAction action = 6;
    Position aoe_position = 7;
}

/*
Status of a player
*/

enum Status {
    ALIVE = 0;
    DEAD = 1;
}
/* A position in the server game grid, the grid is a NxN square with (0,0) in the top left corner
    - x: X coordinate in the grid
    - y: Y coordinate in the grid
 */
message Position {
    uint64 x = 1;
    uint64 y = 2;
}

/* A relative positioncorner
    - x: X coordinate
    - y: Y coordinate
 */
message RelativePosition {
    int64 x = 1;
    int64 y = 2;
}

/* Represents any action that a client/player can make
    - action: the action taken by the player
    - direction: direction of the action (see Direction), used on actions MOVE, ATTACK
    - position: to decide aoe attack center
 */
message ClientAction {
    Action action = 1;
    Direction direction = 2;
    RelativePosition position = 3;
    JoystickValues move_delta = 4;
}

/* Actions a client/player performs
    - MOVE: the player moves
    - ATTACK: player attacks
 */
enum Action {
    ACTION_UNSPECIFIED = 0;
    MOVE = 1;
    ATTACK = 2;
    ATTACK_AOE = 5;
    MOVE_WITH_JOYSTICK = 6;
}

/* Directions an action can happen in
 */
enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    UP = 1;
    DOWN = 2;
    LEFT = 3;
    RIGHT = 4;
}

message JoystickValues {
    float x = 1;
    float y = 2;
}

/* Actions a player performs
    - NOTHING: nothing
    - ATTACKING: player is attacking
 */
enum PlayerAction {
    NOTHING = 0;
    ATTACKING = 1;
    ATTACKING_AOE = 2;
}

/* Represents the events happening in the matchmaking lobby, either from client or server
    - type: type of the event
    - lobby_id: ID of the matchmaking lobby, used on CONNECTED
    - player_id: ID assigned to the player (client) in the matchmaking lobby, used on CONNECTED
    - added_player_id: ID of any new player joining the lobby, used on PLAYER_ADDED
    - game_id: ID of the game session to join, used on GAME_STARTED
    - [DEPRECATED] player_count: Number of players in the matchmaking lobby, used on PLAYER_COUNT
    - players: List of players, used on PLAYER_ADDED
    - removed_player_id: ID of any player leaving the lobby, used on PLAYER_REMOVED
 */
message LobbyEvent {
    LobbyEventType type = 1;
    string lobby_id = 2;
    uint64 player_id = 3;
    uint64 added_player_id = 4;
    string game_id = 5;
    uint64 player_count = 6;
    repeated uint64 players = 7;
    uint64 removed_player_id = 8;
}

/* Type of lobby events
    - CONNECTED: Websocket connection is established
    - PLAYER_ADDED: A player has joined the matchmaking lobby
    - GAME_STARTED: A game session has started from this lobby
    - PLAYER_COUNT: Current player count in the lobby
    - PLAYER_REMOVED: A player has left the matchmaking lobby
 */
enum LobbyEventType {
    TYPE_UNSPECIFIED = 0;
    CONNECTED = 1;
    PLAYER_ADDED = 2;
    GAME_STARTED = 3;
    PLAYER_COUNT = 4;
    START_GAME = 5;
    PLAYER_REMOVED = 6;
}
