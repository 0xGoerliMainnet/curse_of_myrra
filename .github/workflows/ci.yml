name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  MIX_ENV: test
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

permissions:
  contents: read

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: [1.14.2]
        otp: [24.1.7]
    services:
      db:
        image: postgres:15-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dark_worlds_server_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Elixir
        uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
        with:
          elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
          otp-version: ${{ matrix.otp }} # Define the OTP version [required]
        env:
          ImageOS: ubuntu20
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: server/deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        run: cd server && make setup
      - name: Credo Elixir Check
        run: cd server && make credo
      - name: (Server) Check Elixir Formatting
        run: cd server && mix format --check-formatted
      - name: (Load Test) Check Elixir Formatting
        run: cd server && mix format --check-formatted
      - name: Check Rust Formatting
        run: cd server && cd native/gamestate && cargo fmt --check
      - name: Compiles without warnings
        run: cd server && mix compile --all-warnings --warnings-as-errors
      - name: Run tests
        run: cd server && make tests
  buildWebGL:
    name: Build for WebGL
    environment:
      name: testing
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: client/Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          projectPath: client
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ vars.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: client
          targetPlatform: WebGL
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
      - name: Upload to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: build/
          target: /root/dark_worlds_server/server/_build/prod/rel/dark_worlds_server/lib/dark_worlds_server-0.1.0/priv/static/game/
